{"version":3,"sources":["Addtask.js","Todoapp.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["Addtask","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","justsubmitted","bind","assertThisInitialized","event","preventDefault","input","target","querySelector","value","props","updateList","react_default","a","createElement","className","onSubmit","placeholder","type","Component","Todoapp","remove","e","parentNode","innerText","_this2","items","tasks","map","x","y","key","onClick","Main","state","removeTask","text","updatedTasks","push","setState","updateLocalStorage","splice","indexOf","localStorage","setItem","JSON","stringify","src_Addtask","src_Todoapp","tasksLists","getItem","parse","App","src_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8a718805.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\n\nclass Addtask extends Component {\n    constructor() {\n        super();\n        this.justsubmitted = this.justsubmitted.bind(this);\n    }\n\n     /**\n     * function that take value from user input\n     */\n    justsubmitted(event) {\n        event.preventDefault();\n        var input = event.target.querySelector('input');\n        var value = input.value;\n        input.value = '';\n        this.props.updateList(value);\n    }\n    render() {\n        return (\n            <div>\n                <form className='list-todoapp-top' onSubmit={this.justsubmitted}>\n                    <input className='search-todoapp' placeholder='Add Task - Press Enter' type=\"text\"></input>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Addtask","import React, { Component } from 'react'\n\n\nclass Todoapp extends Component {\n    constructor() {\n        super();\n        this.remove = this.remove.bind(this);\n    }\n\n    remove(e) {\n        let value = e.target.parentNode.querySelector('span').innerText;\n        this.props.remove(value);\n    }\n\n    render() {\n        /**\n         * using .map() to produces an elements\n         */\n        let items = this.props.tasks.map((x,y) =>{\n            return <li className='todo-list-item' key={y}><span className='todo-details'>{x}</span><button className='todoapp-remove' onClick={this.remove}>x</button></li>\n        });\n        return (\n            <div className='showing-todoapp'>\n                <ol className='todo-list'>\n                    {items}\n                </ol>\n            </div>\n        );\n    }\n}\n\nexport default Todoapp","import React, { Component } from 'react'\nimport Addtask from './Addtask'\nimport TodoApp from './Todoapp'\n\n\nclass Main extends Component {\n    constructor(props) {\n        super();\n        this.state = {tasks: props.tasks};\n        this.updateList = this.updateList.bind(this);\n        this.removeTask = this.removeTask.bind(this);\n    }\n\n    /**\n     * function to update tasks\n     */\n    updateList(text) {\n        let updatedTasks = this.state.tasks;\n        updatedTasks.push(text);\n        this.setState({tasks: updatedTasks});\n        this.updateLocalStorage(updatedTasks);\n    }\n\n    /**\n     * function to remove tasks\n     */\n    removeTask(text){\n        let updatedTasks = this.state.tasks;\n        updatedTasks.splice(updatedTasks.indexOf(text), 1);\n        this.setState({tasks: updatedTasks});\n        this.updateLocalStorage(updatedTasks);\n    }\n    /**\n     * function to update local storgae\n     */\n    updateLocalStorage(updatedTasks) {\n        localStorage.setItem('storedTasks', JSON.stringify(updatedTasks));\n    }\n\n    render() {\n        return (\n            <div className='list-todoapp'>\n                \n                <Addtask updateList={this.updateList}/>\n                {/**\n                * pass tasksLists as props\n                */}\n                <TodoApp tasks={this.state.tasks} remove={this.removeTask}/>\n            </div>\n        );\n    }\n}\n\nexport default Main","import React, { Component } from 'react';\nimport Main from './Main'\nimport './App.css';\n\n/**\n * Array Hold tasks\n */\nlet tasksLists = [];\n\n/**\n * save task to the local storge\n */\n\nlet tasks = localStorage.getItem('storedTasks');\n\nif (tasks) {\n  tasksLists = JSON.parse(tasks);\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Main tasks={tasksLists}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}